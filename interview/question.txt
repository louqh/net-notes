
1)什么是copy on write？
  在复制一个对象的时候并不是真正的把原先的对象复制到内存的另外一个位置上，
  而是在新对象的内存映射表中设置一个指针，指向源对象的位置，并把那块内存的Copy-On-Write位设置为1.
  这样，在对新的对象执行读操作的时候，内存数据不发生任何变动，直接执行读操作；
  而在对新的对象执行写操作时，将真正的对象复制到新的内存地址中，并修改新对象的内存映射表指向这个新的位置，
  并在新的内存位置上执行写操作。
  这个技术需要跟虚拟内存和分页同时使用，好处就是在执行复制操作时因为不是真正的内存复制，
  而只是建立了一个指针，因而大大提高效率。但这不是一直成立的，如果在复制新对象之后，
  大部分对象都还需要继续进行写操作会产生大量的分页错误，得不偿失。所以COW高效的情况只是在复制新对象之后，
  在一小部分的内存分页上进行写操作。
2)可重入和线程安全的区别？
3)解释断错误发生的过程？
4)简述Linux创建子进程的过程？
5)简述用pthread进行多线程编程的方法和要点？
6)dup的原理？
7)简述Linux标准输入输出和重定向？
8)简述Linux文件与目录的时间状态(mtime, ctime, atime)的含义？
9)谈谈对inode的理解？
10)是否用过git和git工作流程简述？

C：
1) malloc与alloc的区别？
  C语言跟内存分配方式
 (1)从静态存储区域分配。内存在程序编译的时候就已经分配好，
    这块内存在程序的整个运行期间都存在。例如全局变量，static变量。
 (2)在栈上创建。在执行函数时，函数内局部变量的存储单元都可以在栈上创建，
    函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，
    效率很高，但是分配的内存容量有限。
 (3)从堆上分配，亦称动态内存分配。程序在运行的时候用malloc或new申请任意多少的内存，
    程序员自己负责在何时用free或delete释放内存。动态内存的生存期由我们决定，
    使用非常灵活，但问题也最多 
 C语言跟内存申请相关的函数主要有alloca,calloc,malloc,free,realloc,sbrk等.
    其中alloca是向栈申请内存,因此无需释放.
 malloc分配的内存是位于堆中的,并且没有初始化内存的内容,
 因此基本上malloc之后,调用函数memset来初始化这部分的内存空间.
 calloc则将初始化这部分的内存,设置为0.
 而realloc则对malloc申请的内存进行大小的调整.申请的内存最终需要通过函数free来释放.
 而sbrk则是增加数据段的大小;
 malloc/calloc/free基本上都是C函数库实现的,跟OS无关.
 C函数库内部通过一定的结构来保存当前有多少可用内存.如果程序malloc的大小超出了库里所留存的空间,那么
 将首先调用brk系统调用来增加可用空间,然后再分配空间.free时,释放的内存并不立即返回给os,而是保留在内部结构中.
 可以打个比方:
 brk类似于批发,一次性的向OS申请大的内存,而malloc等函数则类似于零售,满足程序运行时的要求.
 这套机制类似于缓冲.使用这套机制的原因:
 系统调用不能支持任意大小的内存分配(有的系统调用只支持固定大小以及其倍数的内存申请,
 这样的话,对于小内存的分配会造成浪费;
 系统调用申请内存代价昂贵,涉及到用户态和核心态的转换.
 函数malloc()和calloc()都可以用来分配动态内存空间，但两者稍有区别。    
 malloc()函数有一个参数，即要分配的内存空间的大小：   
 Void *malloc(size_t size); 
 calloc()函数有两个参数，分别为元素的数目和每个元素的大小，这两个参数的乘积就是要分配的内存空间的大小：    
 void *calloc(size_t numElements，size_t sizeOfElement)；
 如果调用成功，函数malloc()和calloc()都将返回所分配的内存空间的首地址。
 malloc() 函数和calloc ()函数的主要区别是前者不能初始化所分配的内存空间，
 而后者能。如果由malloc()函数分配的内存空间原来没有被使用过，则其中的每一位可能都是 0；
 反之，如果这部分内存空间曾经被分配、释放和重新分配，则其中可能遗留各种各样的数据。
 也就是说，使用malloc()函数的程序开始时(内存空间还 没有被重新分配)能正常运行，
 但经过一段时间后(内存空间已被重新分配)可能会出现问题。
 calloc() 函数会将所分配的内存空间中的每一位都初始化为零，也就是说，如果你是为字符类型或整数类型的元素分配内存，
 那么这些元素将保证会被初始化为零；如果你是为指针类型的元素分配内存，
 那么这些元素通常(但无法保证)会被初始化为空指针；如果你是为实数类型的元素分配内存，
 那么这些元素可能(只在某些计算机中)会被初始化为浮点型的零。
 malloc() 函数和calloc ()函数的另一点区别是calloc()函数会返回一个由某种对象组成的数组，
 但malloc()函数只返回一个对象。 为了明确是为一个数组分配内存空 间，有些程序员会选用calloc()函数。
 但是，除了是否初始化所分配的内存空间这一点之外，绝大多数程序员认 为以下两种函数调用方式没有区别：
 calloc(numElements ，sizeOfElement)；
 malloc(numElements *sizeOfElement) ；
 需要解释的一点是，理论上(按
 照ANSIC标准)指针的算术运算只能在一个指定的数组中进行，但是在实践中，即使C编译程序或翻译器遵循这种规定，
 许多C程序还是冲破了这种限制。因 此，尽管malloc()函数并不能返回一个数组，它所分配的内存空间仍然能供一个数组使用
 (对realloc()函数来说同样如此，尽管它也不能返回一 个数组)。
 总之，当你在calloc()函数和malloc()函数之间作选择时，你只需考虑是否要初始化所分配的内存空间，
 而不用考虑函数是否能返回一个数组。 当程序运行过程中malloc了,但是没有free的话,会造成内存泄漏.
 一部分的内存没有被使用,但是由于没有free,因此系统认为这部分内存还在使用,造成不断的向系统申请内存,
 是的系统可用内存不断减少.但是,内存泄漏仅仅指程序在运行时,程序退出时,OS将回收所有的资源.
 因此,适当的重起一下程序,有时候还是有点作用.
2) int x=-1在计算机内如何存储？
 变量都是以补码存储在内存中，负数是取反加一。 
3) static关键字的用法？
  1.static修饰函数中的变量(栈变量):改变变量的生存期,作用域不变仍为所在函数,只被初始化一次。
  2.static修饰全局变量：限制全局变量只能被模块内访问，不可以在别的模块中用extern声明调用。
  3.static修饰函数：作用与修饰全局变量类似，也是限制该函数只能在模块内访问，不能再别的模块中用extern声明调用
  c++:
  1.static静态数据成员属于整个类所有，类的所有对象共同维护。
  2.static静态函数成员也属于整个类，一般用于调用静态数据成员，不能直接访问非static成员（要指定类才行）。
4) 什么是大小端endianess？
  大端(Big Endian)：高位存在低地址，低位存在高地址；
  小端(Littile Endian)：高位存在高地址，低位存在低地址；（intel的x86，ARM普遍都是属于小端）
             big-endian      little-endian
   0x0000    0x12            0xcd
   0x0001    0x23            0xab
   0x0002    0xab            0x34
   0x0003    0xcd            0x12
5) 一般什么时候用函数指针？
   函数指针主要是能够用一个指针的方式指向一个函数，并且还可以换换指向别的函数，
   比如有多个函数的申明，它们有不同的具体实现，如果需要调用它们，就可以用一个指针轮流指向它们。
   回调机制就是很好的应用函数指针的例子，这是函数指针作为回调函数的一个参数。
6) memcopy和memmove的区别?
   作用是一样的，唯一的区别是，当内存发生局部重叠的时候，
   memmove保证拷贝的结果是正确的，memcpy不保证拷贝的结果的正确。
7) 什么是字节对齐以及作用？

8) delete 和 delete[]区别？
9) extern "C" 作用？
10)fwirte和write区别？
12)ctrl+c 发什么信号(SIGINT)?
13)print %d 打印一个8byte整数，结果是什么？


C++:
1)简述和C语言的不同
2)简述虚函数，作用，好处，坏处
3)简述继承和组合，什么时候用哪个
4)关键字const有什么含意和作用
