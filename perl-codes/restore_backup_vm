#!/usr/bin/perl -w

use strict;
use POSIX 'setsid';

my $back_host; 
my $find = 0;
my $full_path;
my $back_path;
my $instance_path;
sub search_subdir;

sub do_restore_vm($)
{
    my $inst = shift;
    my $back;
    

    `mkdir -p $instance_path/$inst`;
    open(TP, "tail -1 $full_path/backup-list |");
    while(<TP>) {
        chomp;
        $back = $_;
    }
    close(TP);
    $back =~ /(back.*?),/;
    `cp -r $full_path/$1/* $instance_path/$inst`;
    `touch  $instance_path/$inst/console.log`;
    `chown -R eucalyptus:eucalyptus $instance_path`;
    `virsh define  $instance_path/$inst/libvirt.xml`;
}
sub get_vm_list() {
    open(FH, "cat /root/backup/vm.list |")or die("Can't open vm.list: $!\n");
    while(<FH>) {
        chomp;
        if (/i-.*/) {
            $find = 0;
            search_subdir($back_path, $_);
            if ($find == 1 ) {
                print "start restore $_ instance...\n";
                $full_path =~ /$back_path\/(.*)/;
                do_restore_vm ($1);
            } else {
                print "not find $_ instance. \n";
            }
        }
    }
    close(FH);
}

sub search_subdir() {
    my $path = shift;
    my $search = shift;
    my @entries=();

    opendir (DIR, $path) or die("Can't open $path: $!\n");
    @entries = readdir(DIR);
    closedir DIR;
    foreach (@entries) {
        next if /^\.|\.$/;
        if (-d "$path/$_") {
            if (/$search/) {
                $find = 1;
                $full_path = "$path/$_";
            }
            if ($find == 0) { 
                search_subdir("$path/$_", $search);
            }
        }
    }
}

sub get_conf() {
    open(FH, "cat /etc/eucalyptus/eucalyptus.conf |");
    while(<FH>) {
        chomp;
        next if /^#/; 
        if (/BACK_HOST/) {
            /\=\"(.+)\"/;
            $back_host = $1;
        }
        if (/BACKUP_PATH/) {
            /\=\"(.+)\"/;
            $back_path = $1;
        }
        if (/INSTANCE_PATH/) {
            /\=\"(.+)\"/;
            $instance_path = $1;
        }
 
    }
    close(FH);
}

sub do_status() {
    my $pidfile;
    my $pid;
    if (open($pidfile, "<", "/var/run/restore_backup_vm.pid")) {
        $pid = <$pidfile>;
        close($pidfile);
        if ($pid =~ /\d/) {
            open ($pidfile, "ls /proc | grep $pid |"); 
            my $exist = <$pidfile>;
            close($pidfile);
            if(defined($exist)) {
                print "restore_backup_vm is running, exit!\n";
                exit;
            } 
        } else {
            print "backup complete, exit!\n";
            exit;
        }
    }
}
# create daemon process
sub become_daemon {
    die "Can't fork" unless defined (my $child = fork);
    exit 0 if $child;
    setsid();
    close STDIN;
    close STDOUT;
    close STDERR;

    open STDIN, '/var/log/restore.log';
    open STDOUT, '>/var/log/restore.log';
    open STDERR, '>/var/log/restore.log';
    chdir '/';
    umask(0);
    $ENV{PATH} = "/bin:/sbin:/usr/bin:/usr/sbin";
    $SIG{CHLD} = 'IGNORE';

    return $$;
}
# start main loop.
#------------------------------
#&sudo($USER, $GROUP);
&do_status();
&become_daemon();
#------------------------------
my $pid = fork;
my $pidfile;
if ($pid == 0) {
    open($pidfile, ">", "/var/run/restore_backup_vm.pid");
    print $pidfile $$;
    close($pidfile);
    while(1) {
        sleep 10;
        get_conf();
        if ($back_host eq "STANDBY") {
            print "NC is running $back_host mode!\n";
            next;
        } else {
            get_vm_list();
            open($pidfile, ">", "/var/run/restore_backup_vm.pid");
            print $pidfile "completed";
            close($pidfile);
            `service eucalyptus-nc start`;
            exit;
        }
    }
}
exit;

# main end

# function to change user and group
sub sudo {
    my ($user, $group) = @_;
    my $uid = (getpwnam($user))[2];
    my $gid = (getgrnam($group))[2];
    ($(, $)) = ($gid, "$gid $gid");
    ($<, $>) = ($uid, $uid);
}
__END__
